#include <STC8G.h>
#include <intrins.h>
//另一种风格，待测🛝
// 宏定义
#define P54_MASK 0x10  // P5.4 的掩码
#define P55_MASK 0x20  // P5.5 的掩码

// 定义 IO 口模式
#define IO_MODE_INPUT      0x00  // 输入模式
#define IO_MODE_OUTPUT     0x01  // 输出模式
#define IO_MODE_BIDIRECTIONAL 0x02  // 标准双向口模式
#define IO_MODE_OPENDRAIN  0x03  // 开漏模式

// 定义 IO 口配置函数
#define SET_PIN_MODE(port, pin, mode) \
    do { \
        port##M1 &= ~(1 << pin); \
        port##M0 &= ~(1 << pin); \
        port##M0 |= ((mode) << pin); \
    } while (0)

// 延时函数（1ms）
void delay_1ms() {
    unsigned char i, j;
    _nop_();
    i = 12;
    j = 169;
    do {
        while (--j);
    } while (--i);
}

// 初始化GPIO
void GPIO_Init(void) {
    // 设置P5.4为标准双向口
    SET_PIN_MODE(P5, 4, IO_MODE_BIDIRECTIONAL);

    // 设置P5.5为标准双向口
    SET_PIN_MODE(P5, 5, IO_MODE_BIDIRECTIONAL);

    // 设置P3.3为推挽输出模式
    SET_PIN_MODE(P3, 3, IO_MODE_OUTPUT);

    // 默认设置P3.3为低电平，继电器关闭
    P33 = 0;
}

// 控制继电器开
void Relay_On(void) {
    P33 = 1;
}

// 控制继电器关
void Relay_Off(void) {
    P33 = 0;
}

// 消抖处理函数
unsigned char Debounce_Read(unsigned char pin_mask) {
    unsigned char stable_count = 0;
    while (stable_count < 5) {  // 连续5次读取一致才算稳定
        if ((P5 & pin_mask) == 0) {
            stable_count++;
        } else {
            stable_count = 0;
        }
        delay_1ms();  // 延时1ms
    }
    return (P5 & pin_mask) ? 1 : 0;
}

// 全局变量
unsigned char relay_state = 0;       // 继电器状态标志
unsigned int p55_timer = 0;          // P5.5 计时（单位：ms）
unsigned char p54_control_valid = 0; // P5.4 控制是否有效标志

// 检查光电开关状态并控制继电器
void Check_Sensor(void) {
    static unsigned char last_p54_state = 0;
    unsigned char current_p54_state;
    unsigned char current_p55_state;

    // 获取当前P5.5状态
    current_p55_state = (P5 & P55_MASK) ? 1 : 0;

    // 如果P5.5为低电平，立即禁止P5.4控制并关闭继电器
    if (current_p55_state == 0) {
        p54_control_valid = 0;
        Relay_Off();
        relay_state = 0;
        last_p54_state = 0;
        p55_timer = 0;  // 停止计时
    } else {
        // 如果P5.5为高电平，开始计时
        p55_timer++;
        delay_1ms();  // 每调用一次该函数，延时1ms

        // 如果计时达到10秒，允许P5.4控制继电器
        if (p55_timer >= 10000) {  // 10秒
            p54_control_valid = 1;  // 允许P5.4控制继电器
        }
    }

    // 根据P5.4状态控制继电器
    if (p54_control_valid) {
        current_p54_state = Debounce_Read(P54_MASK);

        // 检测状态变化
        if (current_p54_state != last_p54_state) {
            delay_1ms();
            delay_1ms();  // 消抖延时2ms
            current_p54_state = Debounce_Read(P54_MASK);

            if (current_p54_state != last_p54_state) {
                // 实现高电平控制
                if (current_p54_state == 1 && !relay_state) {
                    Relay_On();  // 打开继电器
                    relay_state = 1;
                } else if (current_p54_state == 1 && relay_state) {
                    Relay_Off();  // 关闭继电器
                    relay_state = 0;
                }

                // 更新P5.4的上一个状态
                last_p54_state = current_p54_state;
            }
        }
    }
}

// 主函数
void main(void) {
    GPIO_Init();  // 初始化GPIO

    while (1) {
        Check_Sensor();  // 不断检测光电开关状态并控制继电器
    }
}